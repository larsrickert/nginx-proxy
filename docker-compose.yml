version: '3'

services:
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    restart: always
    container_name: nginx-proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # custom additional nginx config
      - ./proxy.conf:/etc/nginx/conf.d/proxy.conf
      # if you want to secure a site with username/password (basic authentication), comment in the following volume
      # and follow these steps:
      # 1. inside folder `./htpasswd`, create a new file with the name of your domain, e.g. blog.example.de
      # 2. install apache2-utils with `sudo apt install apache2-utils`
      # 3. generate encrypted password with `htpasswd -nb myUsername myPassword`
      # 4. copy the generated command line output to the file created in step 1 and safe
      # 5. After adding or removing files in `./htpasswd` you need to restart the nginx-proxy with `docker-compose restart`
      # - ./htpasswd:/etc/nginx/htpasswd

  nginx-proxy-le:
    image: nginxproxy/acme-companion
    restart: always
    container_name: nginx-proxy-le
    environment:
      DEFAULT_EMAIL: ${LETSENCRYPT_EMAIL}
      NGINX_PROXY_CONTAINER: nginx-proxy
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  certs:
  vhost:
  html:
  acme:

# Do not forget to 'docker network create nginx-proxy' before launch, and to add '--network nginx-proxy' to proxied containers.
networks:
  default:
    name: nginx-proxy
    external: true
